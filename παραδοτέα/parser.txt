%{
#include <cstdio>
#include <stdlib.h>
#include "lexer.hpp"  pif
%}

%token T_eof <<EOF>>
%token T_and "and"
%token T_array "array"
%token T_begin "begin"
%token T_boolean "boolean"
%token T_char "char"
%token T_dispose "dispose"
%token T_div "div"
%token T_do "do"
%token T_else "else"
%token T_end "end"
%token T_false "false"
%token T_forward "forward"
%token T_function "function"
%token T_goto "goto"
%token T_if "if"
%token T_integer "integer"
%token T_label "label"
%token T_mod "mod"
%token T_new "new"
%token T_nil "nil"
%token T_not "not"
%token T_of "of"
%token T_or "or"
%token T_procedure "procedure"
%token T_program "program"
%token T_real "real"
%token T_result "result"
%token T_return "return"
%token T_then "then"
%token T_true "true"
%token T_var "var"
%token T_while "while"
%token T_eq "="
%token T_gt ">"
%token T_lt "<"
%token T_ne "<>"
%token T_ge ">="
%token T_le "<="
%token T_plus "+"
%token T_minus "-"
%token T_times "*"
%token T_rdiv "/"
%token T_dref "^"
%token T_ref "@"
%token T_assign ":="
%token T_semicolon ";"
%token T_dot "."
%token T_rparen ")"
%token T_colon ":"
%token T_comma ","
%token T_lbracket "["
%token T_rbracket "]"
%token T_id
%token T_intconst
%token T_realconst
%token T_charconst
%token T_stringconst


%nonassoc '=' '>' '<' '<=' '>=' '<>'
%left '+' '-' T_or 
%left '*' '/' T_div T_mod T_and 

%expect pif

%union{
	int i;
	double f;
	char str[80]; pif
	bool b; pif
array1,2 pointers pif
}

%token<str> T_id
%token<i> T_intconst
%token<f> T_realconst
%token<str> T_charconst
%token<str> T_stringconst

%type pif για μη τερματικα τοκεν για τερματικα

%%

program				: "program" T_id ";" body "."
				;

body				: local_list block
				;

local_list			: local_list local
				| %empty
				;

local 				: "var" var_name_type_list
				| "label" var_name_list ";" 
				| header ";" body ";"
				| "forward" header ";"
				;



var_name_type_list		: var_name_list ":" type ";"
				| var_name_type_list var_name_list ":" type ";"
				;


var_name_list			: T_id
				| T_id "," var_name_list
				;

header				: "procedure" T_id "(" formal_listI ")"
				| "function" T_id "(" formal_listI ")" ":" type
				;

formal_listI			: formal_list
				| %empty
				;

formal_list			: formal
				| formal_list ";" formal 
				;

formal:				: "var" var_name_list ":" type
				| var_name_list ":" type
				;

type				: "integer"
				| "real"
				| "boolean"
				| "char"
				| "array" "[" T_intconst "]" "of" type 
				| "array" "of" type
				| "^" type
				;

block				: "begin" stmt_list "end"
				;


stmt_list			: stmt
				| stmt_list ";" stmt
				;


stmt				: %empty
				| l-value ":=" expr
				| block
				| call
				| "if" expr "then" stmt
				| "if" expr "then" stmt "else" stmt
				| "while" expr "do" stmt
				| T_id ":" stmt
				| "goto" T_id
				| "return"
				| "new" l-value
				| "new" "[" expr "]" l-value
				| "dispose" l-value
				| "dispose" "[" "]" l-value
				;


expr				: l-value		{ $$ = $1; }
				| r-value		{ $$ = $1; }
				;

l-value				: T_id	
				| "result"		
				| T_stringconst		
				| l-value "[" expr "]"
				| expr "^"
				| "(" l-value ")"
				;

r-value				: T_intconst		{ $$ = $1; }
				| "true"		{ $$ = true; }
				| "false"		{ $$ = false; }
				| T_realconst		{ $$ = $1; }
				| T_charconst		{ $$ = $1; }
				| "(" r-value ")"	{ $$ = $2; }
				| "nil"			{ $$ = nil; }
				| call			{ $$ = $1; }
				| "@" l-value		{ $$ = "^" $2; } pif
				| "not" expr		{ $$ = ! $2; }
				| "+" expr		{ $$ = $2; }
				| "-" expr		{ $$ = (-1)*$2; }
				| expr "+" expr		{ $$ = $1 + $3; }
				| expr "-" expr		{ $$ = $1 - $3; }
				| expr "*" expr		{ $$ = $1 * $3; }
				| expr "/" expr		{ $$ = 1.0 * $1 / $3; }
				| expr "div" expr	{ $$ = $1 / $3; }
				| expr "mod" expr	{ $$ = $1 % $3; }
				| expr "or" expr	{ $$ = $1 || $3; }
				| expr "and" expr	{ $$ = $1 && $3; }
				| expr "=" expr		{ $$ = $1 == $3; }
				| expr "<>" expr	{ $$ = $1 != $3; }
				| expr "<" expr		{ $$ = $1 < $3; }
				| expr "<=" expr	{ $$ = $1 <= $3; }
				| expr ">" expr		{ $$ = $1 > $3; }
				| expr ">=" expr	{ $$ = $1 >= $3; }
				;

call				: T_id "(" ")"
				| T_id "(" expr_list ")"
				;

expr_list			: expr
				| expr "," expr_list
				;

